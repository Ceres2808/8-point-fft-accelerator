$date
	Sun Jul 06 17:44:18 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fft8_tb $end
$var wire 1 ! valid $end
$var wire 32 " X7_real [31:0] $end
$var wire 32 # X7_imag [31:0] $end
$var wire 32 $ X6_real [31:0] $end
$var wire 32 % X6_imag [31:0] $end
$var wire 32 & X5_real [31:0] $end
$var wire 32 ' X5_imag [31:0] $end
$var wire 32 ( X4_real [31:0] $end
$var wire 32 ) X4_imag [31:0] $end
$var wire 32 * X3_real [31:0] $end
$var wire 32 + X3_imag [31:0] $end
$var wire 32 , X2_real [31:0] $end
$var wire 32 - X2_imag [31:0] $end
$var wire 32 . X1_real [31:0] $end
$var wire 32 / X1_imag [31:0] $end
$var wire 32 0 X0_real [31:0] $end
$var wire 32 1 X0_imag [31:0] $end
$var reg 1 2 clk $end
$var reg 1 3 rst $end
$var reg 1 4 start $end
$var reg 16 5 x0_imag [15:0] $end
$var reg 16 6 x0_real [15:0] $end
$var reg 16 7 x1_imag [15:0] $end
$var reg 16 8 x1_real [15:0] $end
$var reg 16 9 x2_imag [15:0] $end
$var reg 16 : x2_real [15:0] $end
$var reg 16 ; x3_imag [15:0] $end
$var reg 16 < x3_real [15:0] $end
$var reg 16 = x4_imag [15:0] $end
$var reg 16 > x4_real [15:0] $end
$var reg 16 ? x5_imag [15:0] $end
$var reg 16 @ x5_real [15:0] $end
$var reg 16 A x6_imag [15:0] $end
$var reg 16 B x6_real [15:0] $end
$var reg 16 C x7_imag [15:0] $end
$var reg 16 D x7_real [15:0] $end
$var integer 32 E error_count [31:0] $end
$var real 1 F tolerance $end
$scope module uut $end
$var wire 1 2 clk $end
$var wire 1 3 rst $end
$var wire 1 4 start $end
$var wire 16 G x0_imag [15:0] $end
$var wire 16 H x0_real [15:0] $end
$var wire 16 I x1_imag [15:0] $end
$var wire 16 J x1_real [15:0] $end
$var wire 16 K x2_imag [15:0] $end
$var wire 16 L x2_real [15:0] $end
$var wire 16 M x3_imag [15:0] $end
$var wire 16 N x3_real [15:0] $end
$var wire 16 O x4_imag [15:0] $end
$var wire 16 P x4_real [15:0] $end
$var wire 16 Q x5_imag [15:0] $end
$var wire 16 R x5_real [15:0] $end
$var wire 16 S x6_imag [15:0] $end
$var wire 16 T x6_real [15:0] $end
$var wire 16 U x7_imag [15:0] $end
$var wire 16 V x7_real [15:0] $end
$var parameter 16 W TW_1_IMAG $end
$var parameter 16 X TW_1_REAL $end
$var parameter 16 Y TW_2_IMAG $end
$var parameter 16 Z TW_2_REAL $end
$var parameter 16 [ TW_3_IMAG $end
$var parameter 16 \ TW_3_REAL $end
$var reg 32 ] X0_imag [31:0] $end
$var reg 32 ^ X0_real [31:0] $end
$var reg 32 _ X1_imag [31:0] $end
$var reg 32 ` X1_real [31:0] $end
$var reg 32 a X2_imag [31:0] $end
$var reg 32 b X2_real [31:0] $end
$var reg 32 c X3_imag [31:0] $end
$var reg 32 d X3_real [31:0] $end
$var reg 32 e X4_imag [31:0] $end
$var reg 32 f X4_real [31:0] $end
$var reg 32 g X5_imag [31:0] $end
$var reg 32 h X5_real [31:0] $end
$var reg 32 i X6_imag [31:0] $end
$var reg 32 j X6_real [31:0] $end
$var reg 32 k X7_imag [31:0] $end
$var reg 32 l X7_real [31:0] $end
$var reg 3 m pipeline_stage [2:0] $end
$var reg 1 n processing $end
$var reg 1 ! valid $end
$scope module cmult0 $end
$var wire 32 o a_imag [31:0] $end
$var wire 32 p a_real [31:0] $end
$var wire 32 q b_imag [31:0] $end
$var wire 32 r b_real [31:0] $end
$var wire 1 2 clk $end
$var reg 64 s ac [63:0] $end
$var reg 64 t ad [63:0] $end
$var reg 64 u bc [63:0] $end
$var reg 64 v bd [63:0] $end
$var reg 32 w result_imag [31:0] $end
$var reg 32 x result_real [31:0] $end
$var reg 64 y temp_imag [63:0] $end
$var reg 64 z temp_real [63:0] $end
$upscope $end
$scope module cmult1 $end
$var wire 32 { a_imag [31:0] $end
$var wire 32 | a_real [31:0] $end
$var wire 32 } b_imag [31:0] $end
$var wire 32 ~ b_real [31:0] $end
$var wire 1 2 clk $end
$var reg 64 !" ac [63:0] $end
$var reg 64 "" ad [63:0] $end
$var reg 64 #" bc [63:0] $end
$var reg 64 $" bd [63:0] $end
$var reg 32 %" result_imag [31:0] $end
$var reg 32 &" result_real [31:0] $end
$var reg 64 '" temp_imag [63:0] $end
$var reg 64 (" temp_real [63:0] $end
$upscope $end
$scope module cmult2 $end
$var wire 32 )" a_imag [31:0] $end
$var wire 32 *" a_real [31:0] $end
$var wire 32 +" b_imag [31:0] $end
$var wire 32 ," b_real [31:0] $end
$var wire 1 2 clk $end
$var reg 64 -" ac [63:0] $end
$var reg 64 ." ad [63:0] $end
$var reg 64 /" bc [63:0] $end
$var reg 64 0" bd [63:0] $end
$var reg 32 1" result_imag [31:0] $end
$var reg 32 2" result_real [31:0] $end
$var reg 64 3" temp_imag [63:0] $end
$var reg 64 4" temp_real [63:0] $end
$upscope $end
$scope module cmult3 $end
$var wire 32 5" a_imag [31:0] $end
$var wire 32 6" a_real [31:0] $end
$var wire 32 7" b_imag [31:0] $end
$var wire 32 8" b_real [31:0] $end
$var wire 1 2 clk $end
$var reg 64 9" ac [63:0] $end
$var reg 64 :" ad [63:0] $end
$var reg 64 ;" bc [63:0] $end
$var reg 64 <" bd [63:0] $end
$var reg 32 =" result_imag [31:0] $end
$var reg 32 >" result_real [31:0] $end
$var reg 64 ?" temp_imag [63:0] $end
$var reg 64 @" temp_real [63:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 A" j [31:0] $end
$upscope $end
$scope task check_results $end
$var reg 56 B" test_name [55:0] $end
$var integer 32 C" i [31:0] $end
$var real 1 D" imag_error $end
$var real 1 E" real_error $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1010010101111110 \
b1010010101111110 [
b0 Z
b1000000000000000 Y
b101101010000010 X
b1010010101111110 W
$end
#0
$dumpvars
r0 E"
r0 D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
b10100101011111100000000000000000 8"
b10100101011111100000000000000000 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
b1011010100000100000000000000000 ,"
b10100101011111100000000000000000 +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
b0 ~
b10000000000000000000000000000000 }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
b1011010100000100000000000000000 r
b10100101011111100000000000000000 q
bx p
bx o
0n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
r1000 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
13
02
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
0!
$end
#5000
12
#10000
02
#15000
12
#20000
02
#25000
12
#30000
02
#35000
12
#40000
02
#45000
12
#50000
02
03
#55000
12
#60000
02
#65000
12
#70000
02
14
b1000 D
b1000 V
b111 B
b111 T
b110 @
b110 R
b101 >
b101 P
b100 <
b100 N
b11 :
b11 L
b10 8
b10 J
b1 6
b1 H
#75000
b1 m
1n
12
#80000
02
04
#85000
b0 5"
b0 6"
b0 )"
b11111111111110000000000000000000 *"
b0 {
b11111111111111000000000000000000 |
b0 o
b101000000000000000000 p
b10 m
12
#90000
02
#95000
b0 ;"
b0 :"
b0 <"
b0 9"
b0 /"
b10110101000001000000000000000000000000000000000000 ."
b0 0"
b1111111111111101001010111111000000000000000000000000000000000000 -"
b0 #"
b10000000000000000000000000000000000000000000000000 ""
b0 $"
b0 !"
b0 u
b1111111111111000111011011101100000000000000000000000000000000000 t
b0 v
b111000100100010100000000000000000000000000000000000 s
b11 m
12
#100000
02
#105000
b1111111111111000111011011101100000000000000000000000000000000000 y
b111000100100010100000000000000000000000000000000000 z
b10000000000000000000000000000000000000000000000000 '"
b0 ("
b10110101000001000000000000000000000000000000000000 3"
b1111111111111101001010111111000000000000000000000000000000000000 4"
b0 ?"
b0 @"
b100 m
12
#110000
02
#115000
b0 ="
b0 >"
b11010100000100000000000000000000 1"
b101011111100000000000000000000 2"
b0 %"
b0 &"
b11101101110110000000000000000000 w
b10010001010000000000000000000 x
bx #
bx k
bx "
bx l
bx %
bx i
bx $
bx j
bx '
bx g
bx &
bx h
bx )
bx e
bx (
bx f
bx +
bx c
bx *
bx d
bx -
bx a
bx ,
bx b
b11111111111111000000000000000000 .
b11111111111111000000000000000000 `
b1001000000000000000000 0
b1001000000000000000000 ^
1!
0n
b0 m
12
#120000
02
#125000
0!
12
b1 E
r0 D"
b1000 C"
b100000010000110110000101110011011001010010000000110001 B"
#130000
02
#135000
12
#140000
02
#145000
12
#150000
02
#155000
12
#160000
02
#165000
12
#170000
02
#175000
12
#180000
02
#185000
12
#190000
02
#195000
12
#200000
02
#205000
12
#210000
02
#215000
12
#220000
02
#225000
b1 m
1n
12
14
b1111111111111111 C
b1111111111111111 U
b1 ?
b1 Q
b1111111111111111 ;
b1111111111111111 M
b1 7
b1 I
b0 D
b0 V
b1111111111111111 B
b1111111111111111 T
b0 @
b0 R
b1 >
b1 P
b0 <
b0 N
b1111111111111111 :
b1111111111111111 L
b0 8
b0 J
#230000
02
#235000
b0 *"
b1000000000000000000 {
b0 |
b0 p
b10 m
12
04
#240000
02
#245000
b0 t
b0 s
b0 ""
b1111111111111110000000000000000000000000000000000000000000000000 $"
b0 ."
b0 -"
b11 m
12
#250000
02
#255000
b0 3"
b0 4"
b0 '"
b10000000000000000000000000000000000000000000000000 ("
b0 y
b0 z
b100 m
12
#260000
02
#265000
b0 w
b0 x
b0 1"
b0 2"
b101011111100000000000000000000 #
b101011111100000000000000000000 k
b11010100000100000000000000000000 "
b11010100000100000000000000000000 l
b11010100000100000000000000000000 %
b11010100000100000000000000000000 i
b101011111100000000000000000000 $
b101011111100000000000000000000 j
b10010001010000000000000000000 '
b10010001010000000000000000000 g
b11101101110110000000000000000000 &
b11101101110110000000000000000000 h
b11101101110110000000000000000000 )
b11101101110110000000000000000000 e
b10010001010000000000000000000 (
b10010001010000000000000000000 f
b0 +
b0 c
b1000000000000000000 *
b1000000000000000000 d
b0 -
b0 a
b1000000000000000000 ,
b1000000000000000000 b
b0 .
b0 `
b0 0
b0 ^
1!
0n
b0 m
12
#270000
02
#275000
0!
12
r737148928 E"
r3558080512 D"
b1000 C"
b110 E
b100000010000110110000101110011011001010010000000110010 B"
#280000
02
#285000
12
#290000
02
#295000
12
#300000
02
#305000
12
#310000
02
#315000
12
#320000
02
#325000
12
#330000
02
#335000
12
#340000
02
#345000
12
#350000
02
#355000
12
#360000
02
#365000
12
#370000
02
#375000
b1 m
1n
12
14
b1000 A"
b0 C
b0 U
b0 ?
b0 Q
b0 ;
b0 M
b0 7
b0 I
b0 B
b0 T
b0 >
b0 P
b0 :
b0 L
b0 6
b0 H
#380000
02
#385000
b0 {
b10 m
12
04
#390000
02
#395000
b0 $"
b11 m
12
#400000
02
#405000
b0 ("
b100 m
12
#410000
02
#415000
b0 #
b0 k
b0 "
b0 l
b0 %
b0 i
b0 $
b0 j
b0 '
b0 g
b0 &
b0 h
b0 )
b0 e
b0 (
b0 f
b0 *
b0 d
b0 ,
b0 b
1!
0n
b0 m
12
#420000
02
#425000
0!
12
r0 D"
r0 E"
b1000 C"
b0 E
b100000010000110110000101110011011001010010000000110011 B"
#430000
02
#435000
12
#440000
02
#445000
12
#450000
02
#455000
12
#460000
02
#465000
12
#470000
02
#475000
12
#480000
02
#485000
12
#490000
02
#495000
12
#500000
02
#505000
12
#510000
02
#515000
12
#520000
02
#525000
12
